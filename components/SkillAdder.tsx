'use client'

import React, { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Plus, Search, TrendingUp, Award } from 'lucide-react'
import { cn } from '@/lib/utils'
import { useProfile, useTaxonomy, useUI, useSkillsData } from '@/domain/state/store'
import { SkillLevel } from '@/types'

interface SkillAdderProps {
  className?: string
}

export function SkillAdder({ className = '' }: SkillAdderProps) {
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedLevel, setSelectedLevel] = useState<SkillLevel>('beginner')
  const [isAdding, setIsAdding] = useState(false)

  const { addSkill, isLoading } = useProfile()
  const { skills } = useTaxonomy()
  const { showToast } = useUI()
  const { availableSkills, userSkills } = useSkillsData()

  // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredSkills = availableSkills.filter(skill =>
    skill.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    skill.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
    skill.category.toLowerCase().includes(searchQuery.toLowerCase())
  )

  // –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ + –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
  const recommendedSkills = availableSkills
    .filter(skill => skill.isCore)
    .slice(0, 6)

  const levelLabels = {
    beginner: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
    intermediate: '–°—Ä–µ–¥–Ω–∏–π',
    advanced: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
    expert: '–≠–∫—Å–ø–µ—Ä—Ç'
  }

  const levelColors = {
    beginner: 'bg-green-100 text-green-800',
    intermediate: 'bg-blue-100 text-blue-800',
    advanced: 'bg-purple-100 text-purple-800',
    expert: 'bg-orange-100 text-orange-800'
  }

  const handleAddSkill = async (skillId: string) => {
    try {
      setIsAdding(true)
      
      await addSkill({
        skillId,
        level: selectedLevel,
        yearsOfExperience: 0,
        endorsements: 0,
        selfAssessed: true,
        verifiedBy: []
      })

      const skillInfo = skills.find(s => s.id === skillId)
      showToast(
        'success',
        '–ù–∞–≤—ã–∫ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ',
        `–ù–∞–≤—ã–∫ "${skillInfo?.name}" –¥–æ–±–∞–≤–ª–µ–Ω —Å —É—Ä–æ–≤–Ω–µ–º ${levelLabels[selectedLevel]}`
      )

      // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
      setSearchQuery('')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞:', error)
      showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫')
    } finally {
      setIsAdding(false)
    }
  }

  const getSkillCategoryIcon = (category: string) => {
    const icons: Record<string, string> = {
      'programming': 'üíª',
      'data-science': 'üìä',
      'devops': '‚öôÔ∏è',
      'security': 'üîí',
      'mobile': 'üì±',
      'web': 'üåê',
      'ai-ml': 'ü§ñ',
      'databases': 'üóÑÔ∏è',
      'cloud': '‚òÅÔ∏è',
      'leadership': 'üëë',
      'communication': 'üí¨',
      'design': 'üé®'
    }
    return icons[category] || 'üõ†Ô∏è'
  }

  const renderSkillCard = (skill: any) => (
    <Card key={skill.id} className="hover:shadow-md transition-shadow cursor-pointer group">
      <CardContent className="p-4">
        <div className="flex items-start justify-between mb-3">
          <div className="flex items-center gap-3">
            <div className="text-2xl">
              {getSkillCategoryIcon(skill.category)}
            </div>
            <div>
              <h4 className="font-medium group-hover:text-blue-600 transition-colors">
                {skill.name}
              </h4>
              <p className="text-sm text-muted-foreground line-clamp-2">
                {skill.description}
              </p>
            </div>
          </div>
          {skill.isCore && (
            <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">
              <Award className="h-3 w-3 mr-1" />
              Core
            </Badge>
          )}
        </div>

        <div className="flex items-center justify-between">
          <Badge variant="outline" className="text-xs">
            {skill.category}
          </Badge>
          <Button
            size="sm"
            onClick={() => handleAddSkill(skill.id)}
            disabled={isAdding || isLoading}
            className="group-hover:bg-blue-600"
          >
            <Plus className="h-4 w-4 mr-1" />
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        </div>
      </CardContent>
    </Card>
  )

  return (
    <div className={cn("space-y-6", className)}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏
            </CardTitle>
            <div className="text-sm text-muted-foreground">
              –£ –≤–∞—Å: {userSkills.length} –Ω–∞–≤—ã–∫–æ–≤
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {/* –ü–æ–∏—Å–∫ –Ω–∞–≤—ã–∫–æ–≤ */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="–ù–∞–π—Ç–∏ –Ω–∞–≤—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, React, Python, Leadership...)"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è */}
          <div className="space-y-2">
            <label className="text-sm font-medium">–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</label>
            <div className="flex gap-2">
              {Object.entries(levelLabels).map(([level, label]) => (
                <Button
                  key={level}
                  variant={selectedLevel === level ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSelectedLevel(level as SkillLevel)}
                  className={selectedLevel === level ? '' : 'hover:bg-muted'}
                >
                  {label}
                </Button>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ */}
      {!searchQuery && recommendedSkills.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">
              –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            </CardTitle>
            <p className="text-sm text-muted-foreground">
              –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏
            </p>
          </CardHeader>
          
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {recommendedSkills.map(renderSkillCard)}
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
      {searchQuery && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
              {filteredSkills.length > 0 && (
                <span className="text-muted-foreground font-normal ml-2">
                  ({filteredSkills.length})
                </span>
              )}
            </CardTitle>
          </CardHeader>
          
          <CardContent>
            {filteredSkills.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-4xl mb-4">üîç</div>
                <h3 className="text-lg font-medium mb-2">–ù–∞–≤—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p className="text-muted-foreground mb-4">
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞.
                </p>
                <Button variant="outline" onClick={() => setSearchQuery('')}>
                  –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ
                </Button>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {filteredSkills.slice(0, 12).map(renderSkillCard)}
              </div>
            )}
            
            {filteredSkills.length > 12 && (
              <div className="text-center pt-4">
                <p className="text-sm text-muted-foreground">
                  –ü–æ–∫–∞–∑–∞–Ω–æ 12 –∏–∑ {filteredSkills.length} –Ω–∞–≤—ã–∫–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ */}
      {!searchQuery && recommendedSkills.length === 0 && (
        <Card>
          <CardContent className="text-center py-8">
            <div className="text-4xl mb-4">üéØ</div>
            <h3 className="text-lg font-medium mb-2">–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏</h3>
            <p className="text-muted-foreground mb-4">
              –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–∞—Ä—å–µ—Ä—ã.
            </p>
            <Button onClick={() => setSearchQuery('python')}>
              –ù–∞—á–∞—Ç—å —Å –ø–æ–∏—Å–∫–∞
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
