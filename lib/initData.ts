// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ PathFinder
import { mockUsers } from '@/mocks/users'
import { baseSkills } from '@/config/skills'
import { baseQuests, baseBadges } from '@/config/gamification'
import { dataService } from './dataService'

export async function initializeMockData() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö PathFinder...')

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const db = await dataService.readDatabase()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    if (db.users.length > 0) {
      console.log('‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')
      return
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const user of mockUsers) {
      await dataService.create('users', {
        ...user,
        hireDate: user.hireDate.toISOString(),
        lastLoginAt: user.lastLoginAt?.toISOString(),
        createdAt: user.createdAt.toISOString(),
        updatedAt: user.updatedAt.toISOString()
      })

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      await dataService.create('profiles', {
        id: `profile-${user.id}`,
        userId: user.id,
        ...user.profile,
        updatedAt: user.profile.updatedAt.toISOString(),
        skills: user.profile.skills.map(skill => ({
          ...skill,
          addedAt: skill.addedAt.toISOString(),
          updatedAt: skill.updatedAt.toISOString(),
          lastUsed: skill.lastUsed?.toISOString()
        })),
        experiences: user.profile.experiences.map(exp => ({
          ...exp,
          startDate: exp.startDate.toISOString(),
          endDate: exp.endDate?.toISOString()
        })),
        education: user.profile.education.map(edu => ({
          ...edu,
          startDate: edu.startDate.toISOString(),
          endDate: edu.endDate?.toISOString()
        })),
        certifications: user.profile.certifications.map(cert => ({
          ...cert,
          issueDate: cert.issueDate.toISOString(),
          expirationDate: cert.expirationDate?.toISOString()
        })),
        completeness: {
          ...user.profile.completeness,
          lastCalculatedAt: user.profile.completeness.lastCalculatedAt.toISOString()
        }
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
    for (const skill of baseSkills) {
      await dataService.create('skills', {
        ...skill,
        id: skill.name.toLowerCase().replace(/\s+/g, '-'),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã
    for (const quest of baseQuests) {
      await dataService.create('quests', {
        ...quest,
        id: quest.title.toLowerCase().replace(/\s+/g, '-'),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –±–µ–π–¥–∂–∏
    for (const badge of baseBadges) {
      await dataService.create('badges', {
        ...badge,
        id: badge.name.toLowerCase().replace(/\s+/g, '-'),
        createdAt: new Date().toISOString()
      })
    }

    console.log('‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!')
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${mockUsers.length}`)
    console.log(`üéØ –ù–∞–≤—ã–∫–æ–≤: ${baseSkills.length}`)
    console.log(`üìã –ö–≤–µ—Å—Ç–æ–≤: ${baseQuests.length}`)
    console.log(`üèÜ –ë–µ–π–¥–∂–µ–π: ${baseBadges.length}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
export async function getDemoUser(role: 'employee' | 'hr' | 'admin' = 'employee') {
  const users = await dataService.getAll('users')
  
  const roleMap = {
    employee: 'employee',
    hr: 'hr', 
    admin: 'admin'
  }
  
  return users.find((user: any) => user.role === roleMap[role]) || users[0]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export async function resetDemoData() {
  console.log('üîÑ –°–±—Ä–æ—Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...')
  await dataService.reset()
  await initializeMockData()
}
